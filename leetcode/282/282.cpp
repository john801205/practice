#include <cassert>
#include <iostream>
#include <string>
#include <vector>

class Solution
{
  public:
    std::vector<std::string> addOperators(const std::string num, const long long target)
    {
      std::vector<std::string> result;
      std::string num_str;
      long long   num_long = 0;

      for (std::string::size_type i = 0; i < num.size(); i++)
      {
        num_long = num_long * 10 + num[i] - '0';
        num_str += num[i];

        dfs(num.substr(i+1), 0, num_long, target, num_str, result);

        if (num_str == "0")
          break;
      }

      return result;
    }

    void dfs(const std::string               num,
             const long long                 sum,
             const long long                 multiply,
             const long long                 target,
             const std::string               path,
                   std::vector<std::string> &result)
    {
      if (num.size() == 0)
      {
        if (sum+multiply == target)
          result.emplace_back(path);

        return;
      }

      std::string num_str;
      long long   num_long = 0;

      for (std::string::size_type i = 0; i < num.size(); i++)
      {
        num_long = num_long * 10 + num[i] - '0';
        num_str += num[i];

        dfs(num.substr(i+1), sum, num_long*multiply, target, path+'*'+num_str, result);
        dfs(num.substr(i+1), sum + multiply, num_long, target, path+'+'+num_str, result);
        dfs(num.substr(i+1), sum + multiply, -num_long, target, path+'-'+num_str, result);

        if (num_str == "0")
          break;
      }
    }
};

int main(void)
{
  Solution s;
  assert(s.addOperators("123", 6) == std::vector<std::string> ({"1*2*3","1+2+3"}));
  assert(s.addOperators("232", 8) == std::vector<std::string> ({"2*3+2", "2+3*2"}));
  assert(s.addOperators("22", 4) == std::vector<std::string> ({"2*2", "2+2"}));
  assert(s.addOperators("105", 5) == std::vector<std::string> ({"1*0+5","10-5"}));
  assert(s.addOperators("00", 0) == std::vector<std::string> ({"0*0","0+0","0-0"}));
  assert(s.addOperators("3456237490", 9191) == std::vector<std::string> ({}));
  // assert(s.addOperators("123456789", 45) == std::vector<std::string> ({"1*2*3*4*5-6-78+9","1*2*3*4+5+6-7+8+9","1*2*3+4+5+6+7+8+9","1*2*3+4+5-6*7+8*9","1*2*3+4-5*6+7*8+9","1*2*3+4-5*6-7+8*9","1*2*3-4*5+6*7+8+9","1*2*3-4*5-6+7*8+9","1*2*3-4*5-6-7+8*9","1*2*3-45+67+8+9","1*2*34+56-7-8*9","1*2*34-5+6-7-8-9","1*2+3*4-56+78+9","1*2+3+4+5*6+7+8-9","1*2+3+4-5+6*7+8-9","1*2+3+4-5-6+7*8-9","1*2+3+45+67-8*9","1*2+3-45+6+7+8*9","1*2+34+5-6-7+8+9","1*2+34+56-7*8+9","1*2+34-5+6+7-8+9","1*2+34-56+7*8+9","1*2+34-56-7+8*9","1*2-3*4+5+67-8-9","1*2-3+4-5-6*7+89","1*2-3-4*5+67+8-9","1*2-3-4+56-7-8+9","1*2-34+5*6+7*8-9","1*23+4*5-6+7-8+9","1*23-4-56-7+89","1+2*3*4*5+6+7-89","1+2*3*4+5*6+7-8-9","1+2*3*4-5+6*7-8-9","1+2*3+4*5*6+7-89","1+2*3+4*5-6+7+8+9","1+2*3-4-5-6*7+89","1+2*34-5*6+7+8-9","1+2+3*4*5+6-7-8-9","1+2+3*4+5+6*7-8-9","1+2+3*45-6-78-9","1+2+3+4+5+6+7+8+9","1+2+3+4+5-6*7+8*9","1+2+3+4-5*6+7*8+9","1+2+3+4-5*6-7+8*9","1+2+3-4*5+6*7+8+9","1+2+3-4*5-6+7*8+9","1+2+3-4*5-6-7+8*9","1+2+3-45+67+8+9","1+2-3*4*5+6+7+89","1+2-3*4+5*6+7+8+9","1+2-3*4-5+6*7+8+9","1+2-3*4-5-6+7*8+9","1+2-3*4-5-6-7+8*9","1+2-3+4*5+6*7-8-9","1+2-3+45+6-7-8+9","1+2-3+45-6+7+8-9","1+2-3-4-5*6+7+8*9","1+2-3-45-6+7+89","1+2-34+5+6+7*8+9","1+2-34+5+6-7+8*9","1+2-34-5-6+78+9","1+23*4+5-6-7*8+9","1+23*4-5-6*7+8-9","1+23*4-56+7-8+9","1+23+4+5+6+7+8-9","1+23+4-5*6+7*8-9","1+23+4-5-67+89","1+23-4*5+6*7+8-9","1+23-4*5-6+7*8-9","1+23-4-5+6+7+8+9","1+23-4-5-6*7+8*9","1+23-45+67+8-9","1-2*3*4+5-6+78-9","1-2*3*4-5-6+7+8*9","1-2*3+4*5+6+7+8+9","1-2*3+4*5-6*7+8*9","1-2*3+4+5+6*7+8-9","1-2*3+4+5-6+7*8-9","1-2*3+4+56+7-8-9","1-2*3+45-67+8*9","1-2*3-4+5*6+7+8+9","1-2*3-4-5+6*7+8+9","1-2*3-4-5-6+7*8+9","1-2*3-4-5-6-7+8*9","1-2*34+5*6-7+89","1-2+3*4*5-6-7+8-9","1-2+3+4-5*6+78-9","1-2+3+45+6-7+8-9","1-2+3-4*5-6+78-9","1-2+3-45+6-7+89","1-2-3*4+5+6+7*8-9","1-2-3*4-5-6+78-9","1-2-3+4-5+67-8-9","1-2-3+45-6-7+8+9","1-2-34+5+6+78-9","1-2-34+56+7+8+9","1-2-34-5+6+7+8*9","1-23*4+5+6*7+89","1-23+4*5-6*7+89","1-23+4-5+67-8+9","1-23+45-67+89","1-23-4+5+67+8-9","1-23-4-5-6-7+89","12*3*4-5*6-78+9","12*3+4+5+6-7-8+9","12*3+4+5-6+7+8-9","12*3-4-5-6+7+8+9","12*3-4-56+78-9","12+3*4+5+6-7+8+9","12+3*45-6-7-89","12+3+4-56-7+89","12+3-4*5+67-8-9","12+3-45+6+78-9","12+34-5-6-7+8+9","12-3*4*5+6+78+9","12-3*4-5+67-8-9","12-3+4*5+6-7+8+9","12-3+4+56-7-8-9","12-3-4+5*6-7+8+9","12-3-4-56+7+89","12-3-45-6+78+9"}));
  return 0;
}
